import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input'; // Adicionado Input para pesquisa
import { Label } from '@/components/ui/label'; // Adicionado Label para formulário
import { Textarea } from '@/components/ui/textarea'; // Adicionado Textarea para formulário
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; // Adicionado Select para formulário
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator'; // Adicionado Separator para formulário
import {
  Plus,
  FileText,
  Calculator, // Ícone para cálculo no formulário
  Download, // Ícone para download de nota fiscal
  MessageCircle, // Ícone para WhatsApp
  Mail, // Ícone para E-mail
  Trash2, // Ícone para exclusão
  Edit, // Ícone para edição
  Search, // Ícone para pesquisa
  ShoppingCart, // Ícone para pedidos
  X // Ícone para fechar formulário
} from 'lucide-react';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const Pedidos = () => {
  const [pedidos, setPedidos] = useState([]);
  const [clientesDisponiveis, setClientesDisponiveis] = useState([]);
  const [materiaisDisponiveis, setMateriaisDisponiveis] = useState([]);
  const [showForm, setShowForm] = useState(false); // Estado para mostrar/esconder formulário
  const [editingPedido, setEditingPedido] = useState(null); // Estado para pedido em edição
  const [searchTerm, setSearchTerm] = useState(""); // Para funcionalidade de pesquisa
  const [formData, setFormData] = useState({
    cliente_id: "",
    material: "",
    thickness: "", // Alterado de 'espessura' para 'thickness' para corresponder ao modelo Order
    width: "",
    length: "",
    quantity: "",
    observations: ""
  });

  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || "http://localhost:5000";
  const N8N_WEBHOOK_URL = "https://n8n-nw.nicwalsolutions.com.br/webhook-test/evo-api-nw-5511979987046"; // URL do seu webhook N8N

  // Função para buscar pedidos do backend
  const fetchPedidos = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/orders`); // Rota corrigida para /api/orders
      if (response.ok) {
        const data = await response.json();
        setPedidos(data);
      } else {
        console.error("Erro ao buscar pedidos:", response.statusText);
      }
    } catch (error) {
      console.error("Erro de rede ao buscar pedidos:", error);
    }
  };

  // Função para buscar clientes disponíveis
  const fetchClientesDisponiveis = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/clients`);
      if (response.ok) {
        const data = await response.json();
        setClientesDisponiveis(data);
      } else {
        console.error("Erro ao buscar clientes disponíveis:", response.statusText);
      }
    } catch (error) {
      console.error("Erro de rede ao buscar clientes disponíveis:", error);
    }
  };

  // Função para buscar materiais disponíveis (pode vir do backend futuramente)
  const fetchMateriaisDisponiveis = async () => {
    setMateriaisDisponiveis([
      { nome: 'Aço Carbono', preco: 25.00 },
      { nome: 'Aço Galvanizado', preco: 32.00 },
      { nome: 'Aço Inox', preco: 85.00 },
      { nome: 'Alumínio', preco: 45.00 },
      { nome: 'Ferro', preco: 18.00 }
    ]);
  };

  // Carrega dados ao montar o componente
  useEffect(() => {
    fetchPedidos();
    fetchClientesDisponiveis();
    fetchMateriaisDisponiveis();
  }, []);

  // Função para calcular o valor do pedido
  const calcularValor = () => {
    if (!formData.material || !formData.width || !formData.length || !formData.quantity) {
      return 0;
    }

    const material = materiaisDisponiveis.find(m => m.nome === formData.material);
    if (!material) return 0;

    const area = (parseFloat(formData.width) * parseFloat(formData.length)) / 1000000; // m²
    const valorTotal = area * material.preco * parseInt(formData.quantity);
    
    return valorTotal;
  };

  // Função para enviar pedido para o N8N (Webhook)
  const enviarPedidoParaN8n = async (pedido) => {
    try {
      const response = await fetch(N8N_WEBHOOK_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(pedido),
      });

      if (response.ok) {
        console.log("✅ Pedido enviado ao N8N com sucesso!", await response.json());
      } else {
        console.error("❌ Erro ao enviar pedido para o N8N:", response.statusText);
      }
    } catch (error) {
      console.error("❌ Erro de rede ao enviar pedido para o N8N:", error);
    }
  };

  // Função para lidar com o envio do formulário (criar/editar pedido)
  const handleSubmit = async (e) => {
    e.preventDefault();
    const valorCalculado = calcularValor();
    const clienteNome = clientesDisponiveis.find(c => c.id === formData.cliente_id)?.name || "";

    const pedidoData = {
      ...formData,
      value: parseFloat(valorCalculado.toFixed(2)), // Usa 'value' para corresponder ao modelo Order
      status: editingPedido ? editingPedido.status : 'Aguardando',
      // order_number: Gerado no backend
      // created_at: Gerado no backend
      cliente_nome: clienteNome // Adiciona o nome do cliente para o PDF/N8N
    };

    try {
      let response;
      if (editingPedido) {
        // Rota PUT para atualizar
        response = await fetch(`${API_BASE_URL}/api/orders/${editingPedido.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(pedidoData)
        });
      } else {
        // Rota POST para criar
        response = await fetch(`${API_BASE_URL}/api/orders`, { // Rota corrigida para /api/orders
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(pedidoData)
        });
      }

      if (response.ok) {
        fetchPedidos(); // Recarrega a lista de pedidos
        resetForm(); // Limpa e esconde o formulário
        alert('Pedido salvo com sucesso!'); // Manter alert por enquanto
        if (!editingPedido) {
          // Envia para o N8N apenas se for um novo pedido
          const newOrderResponse = await response.json(); // Pega o pedido recém-criado com ID e order_number
          enviarPedidoParaN8n(newOrderResponse.order); // Envia o objeto 'order' da resposta
        }
      } else {
        const errorData = await response.json();
        alert(`Erro ao salvar pedido: ${errorData.message}`);
      }
    } catch (error) {
      console.error("Erro de rede ao salvar pedido:", error);
      alert("Erro de rede ao salvar pedido. Verifique a conexão.");
    }
  };

  // Função para limpar e esconder o formulário
  const resetForm = () => {
    setFormData({
      cliente_id: "",
      material: "",
      thickness: "",
      width: "",
      length: "",
      quantity: "",
      observations: ""
    });
    setShowForm(false);
    setEditingPedido(null);
  };

  // Função para preencher o formulário para edição
  const handleEdit = (pedido) => {
    setFormData({
      cliente_id: pedido.client_id, // Usar client_id do pedido
      material: pedido.material,
      thickness: pedido.thickness,
      width: pedido.width.toString(),
      length: pedido.length.toString(),
      quantity: pedido.quantity.toString(),
      observations: pedido.observations
    });
    setEditingPedido(pedido);
    setShowForm(true);
  };

  // Função para deletar um pedido
  const handleDelete = async (id) => {
    if (!window.confirm("Tem certeza que deseja deletar este pedido?")) {
      return;
    }
    try {
      const response = await fetch(`${API_BASE_URL}/api/orders/${id}`, { // Rota corrigida para /api/orders
        method: 'DELETE'
      });
      if (response.ok) {
        fetchPedidos(); // Recarrega a lista de pedidos
        alert('Pedido deletado com sucesso!'); // Manter alert por enquanto
      } else {
        const errorData = await response.json();
        alert(`Erro ao deletar pedido: ${errorData.message}`);
      }
    } catch (error) {
      console.error("Erro de rede ao deletar pedido:", error);
      alert("Erro de rede ao deletar pedido. Verifique a conexão.");
    }
  };

  // Função para obter cor do status
  const getStatusColor = (status) => {
    switch (status) {
      case 'Concluído': return 'bg-green-100 text-green-800';
      case 'Em produção': return 'bg-blue-100 text-blue-800';
      case 'Aguardando': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // FUNÇÃO DE GERAR NOTA FISCAL (PDF)
  const handleGenerateInvoice = async (orderId, orderNumber) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/orders/${orderId}/invoice`);

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `nota_fiscal_pedido_${orderNumber}.pdf`; // Nome do arquivo
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
        alert(`Nota Fiscal do Pedido ${orderNumber} gerada com sucesso!`);
      } else {
        const errorData = await response.json();
        alert(`Erro ao gerar Nota Fiscal: ${errorData.message}`);
      }
    } catch (error) {
      console.error('Erro de rede ou ao gerar Nota Fiscal:', error);
      alert('Erro ao tentar gerar Nota Fiscal. Verifique a conexão.');
    }
  };

  // Funções de compartilhamento (WhatsApp, Email)
  const enviarWhatsApp = (pedido) => {
    const mensagem = `Olá! Segue o pedido ${pedido.order_number}:\n\nCliente: ${pedido.cliente_nome}\nMaterial: ${pedido.material}\nValor: R$ ${parseFloat(pedido.value).toFixed(2).replace('.', ',')}`;
    const url = `https://wa.me/?text=${encodeURIComponent(mensagem)}`;
    window.open(url, '_blank');
  };

  const enviarEmail = (pedido) => {
    const assunto = `Pedido ${pedido.order_number} - GBL Corte e Dobra`;
    const corpo = `Pedido: ${pedido.order_number}\nCliente: ${pedido.cliente_nome}\nMaterial: ${pedido.material}\nValor: R$ ${parseFloat(pedido.value).toFixed(2).replace('.', ',')}`;
    const url = `mailto:?subject=${encodeURIComponent(assunto)}&body=${encodeURIComponent(corpo)}`;
    window.open(url);
  };

  // Renderização do componente
  return (
    <div className="space-y-6 p-4 md:p-6 lg:p-8">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Gestão de Pedidos</h1>
          <p className="text-muted-foreground">
            Crie e gerencie pedidos de corte e dobra
          </p>
        </div>
        <Button onClick={() => setShowForm(true)} className="flex items-center gap-2 transition-all duration-200 hover:scale-105">
          <Plus className="h-4 w-4" />
          Novo Pedido
        </Button>
      </div>

      {/* Formulário de Pedido */}
      {showForm && (
        <Card className="mb-6 transition-all duration-300 ease-in-out transform scale-100 opacity-100">
          <CardHeader className="flex flex-row justify-between items-center">
            <div>
              <CardTitle>
                {editingPedido ? 'Editar Pedido' : 'Novo Pedido'}
              </CardTitle>
              <CardDescription>
                Preencha os dados do pedido para calcular automaticamente o valor
              </CardDescription>
            </div>
            <Button variant="ghost" size="sm" onClick={resetForm} aria-label="Fechar Formulário">
              <X className="h-5 w-5" />
            </Button>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="cliente_id">Cliente</Label>
                  <Select value={formData.cliente_id} onValueChange={(value) => setFormData({...formData, cliente_id: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione o cliente" />
                    </SelectTrigger>
                    <SelectContent>
                      {clientesDisponiveis.map((cliente) => (
                        <SelectItem key={cliente.id} value={cliente.id}>
                          {cliente.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="material">Material</Label>
                  <Select value={formData.material} onValueChange={(value) => setFormData({...formData, material: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione o material" />
                    </SelectTrigger>
                    <SelectContent>
                      {materiaisDisponiveis.map((material) => (
                        <SelectItem key={material.nome} value={material.nome}>
                          {material.nome} - R$ {material.preco.toFixed(2)}/m²
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="thickness">Espessura</Label>
                  <Select value={formData.thickness} onValueChange={(value) => setFormData({...formData, thickness: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione a espessura" />
                    </SelectTrigger>
                    <SelectContent>
                      {['1mm', '2mm', '3mm', '4mm', '5mm', '6mm', '8mm', '10mm'].map((thickness) => (
                        <SelectItem key={thickness} value={thickness}>
                          {thickness}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="quantity">Quantidade</Label>
                  <Input
                    id="quantity"
                    type="number"
                    placeholder="Ex: 5"
                    value={formData.quantity}
                    onChange={(e) => setFormData({...formData, quantity: e.target.value})}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="width">Largura (mm)</Label>
                  <Input
                    id="width"
                    type="number"
                    placeholder="Ex: 1000"
                    value={formData.width}
                    onChange={(e) => setFormData({...formData, width: e.target.value})}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="length">Comprimento (mm)</Label>
                  <Input
                    id="length"
                    type="number"
                    placeholder="Ex: 2000"
                    value={formData.length}
                    onChange={(e) => setFormData({...formData, length: e.target.value})}
                    required
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="observations">Observações</Label>
                <Textarea
                  id="observations"
                  placeholder="Instruções especiais, tipo de corte, dobras, etc."
                  value={formData.observations}
                  onChange={(e) => setFormData({...formData, observations: e.target.value})}
                />
              </div>

              <div className="bg-accent/50 p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Calculator className="h-4 w-4" />
                  <span className="font-medium">Cálculo Automático</span>
                </div>
                <div className="text-2xl font-bold text-primary">
                  R$ {calcularValor().toFixed(2).replace('.', ',')}
                </div>
                <p className="text-sm text-muted-foreground">
                  Valor calculado com base na área e material selecionado
                </p>
              </div>

              <div className="flex gap-2">
                <Button type="submit" className="transition-all duration-200 hover:scale-105">
                  {editingPedido ? 'Atualizar Pedido' : 'Criar Pedido'}
                </Button>
                <Button type="button" variant="outline" onClick={resetForm} className="transition-all duration-200 hover:scale-105">
                  Cancelar
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      )}

      {/* Barra de pesquisa */}
      <div className="flex items-center space-x-2 mb-6">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Pesquisar pedidos por número ou status..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 transition-all duration-200 focus:border-primary focus:ring-1 focus:ring-primary"
          />
        </div>
      </div>

      {/* Lista de Pedidos */}
      <div className="space-y-4">
        <h2 className="text-xl font-semibold">Pedidos Cadastrados</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredOrders.length > 0 ? (
            filteredOrders.map((order) => (
              <Card key={order.id} className="transition-all duration-220 hover:shadow-lg hover:border-primary/50">
                <CardContent className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
                        <ShoppingCart className="h-5 w-5 text-primary" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold">Pedido #{order.order_number} - {clientesDisponiveis.find(c => c.id === order.client_id)?.name || 'Cliente Desconhecido'}</h3>
                        <p className="text-sm text-muted-foreground">Data: {new Date(order.created_at).toLocaleDateString('pt-BR')}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge
                        variant={order.status === 'Concluído' ? 'default' : order.status === 'Em produção' ? 'secondary' : 'outline'}
                        className={`transition-all duration-200 ${
                          order.status === 'Concluído' ? 'bg-green-100 text-green-800 hover:bg-green-200' :
                          order.status === 'Em produção' ? 'bg-blue-100 text-blue-800 hover:bg-blue-200' :
                          'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'
                        }`}
                      >
                        {order.status}
                      </Badge>
                      {/* Botão Gerar Nota Fiscal */}
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button variant="ghost" size="sm" onClick={() => handleGenerateInvoice(order.id, order.order_number)} aria-label="Gerar Nota Fiscal">
                              <Download className="h-4 w-4" />
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Gerar Nota Fiscal (PDF)</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                      {/* Botões de Edição/Exclusão */}
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button variant="ghost" size="sm" onClick={() => handleEdit(order)} aria-label="Editar Pedido">
                              <Edit className="h-4 w-4" />
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Editar Pedido</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button variant="ghost" size="sm" onClick={() => handleDelete(order.id)} aria-label="Deletar Pedido">
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Deletar Pedido</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                  </div>

                  <div className="space-y-2 text-sm">
                    <p>Material: {order.material} ({order.thickness})</p>
                    <p>Dimensões: {order.width} x {order.length} mm</p>
                    <p>Quantidade: {order.quantity} peças</p>
                    <p>Valor Total: R$ {order.value ? order.value.toFixed(2).replace('.', ',') : '0,00'}</p>
                    {order.observations && <p className="text-muted-foreground">Obs: {order.observations}</p>}
                  </div>

                  <CardDescription className="mt-4 text-xs">
                    Criado em: {new Date(order.created_at).toLocaleDateString('pt-BR')}
                  </CardDescription>

                  {/* Botões de Ação Rápida (WhatsApp, Email) */}
                  <Separator className="my-4" />
                  <div className="flex gap-2 justify-end">
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="outline" size="sm" onClick={() => enviarWhatsApp(order)} aria-label="Enviar via WhatsApp">
                                    <MessageCircle className="h-4 w-4" />
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                                <p>Enviar pedido via WhatsApp</p>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="outline" size="sm" onClick={() => enviarEmail(order)} aria-label="Enviar via E-mail">
                                    <Mail className="h-4 w-4" />
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent>
                                <p>Enviar pedido via E-mail</p>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                  </div>
                </CardContent>
              </Card>
            ))
          ) : (
            <Card className="lg:col-span-full text-center p-8 transition-all duration-220">
              <CardContent>
                <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">
                  Nenhum pedido cadastrado ainda.
                </p>
                <Button onClick={() => setShowForm(true)} className="mt-4 transition-all duration-200 hover:scale-105">
                  Cadastrar Primeiro Pedido
                </Button>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default Pedidos;

